#include <stdlib.h>
#include <stdio.h>
#include "board.h"

board * initBoard(int doAddWall){
    /*Creates the board */
    board *toReturn=NULL;
    toReturn = malloc(sizeof(board));
    if (toReturn == NULL){exit(0);} /* Alocation failed */
<<<<<<< HEAD

    char** tab = (char**)malloc(constHeight*sizeof(char*));
    int i;
    for(i=0;i<constHeight;i++)
        tab[i]=(char*)malloc(constLength*sizeof(char));

=======

    char** tab = (char**)malloc(constHeight*sizeof(char*));
    for(int i=0;i<constHeight;i++)
        tab[i]=(char*)malloc(constLength*sizeof(char));
   /* toReturn->boardTable = toReturn = malloc(sizeof(char[constLength][constHeight]));
    if (toReturn->boardTable == NULL){exit(0);} /* Alocation failed */
>>>>>>> 6d3eee0e26e262b6f2bddad77ab2449e907e88ca

    int y=0;
    while(y < constHeight){
        int x = 0;
        while(x<constLength){
<<<<<<< HEAD
             //toReturn->boardTable[y][x] = ' ';
             if(y == constHeight-1 || y == 0 || x == 0 || x == constLength-1) {
                tab[y][x] = '#';
             } else {
                tab[y][x] = ' ';
             }
=======
             //toReturn->boardTable[y][x] = ' ';
             if(y == constHeight-1 || y == 0 || x == 0 || x == constLength-1) {
                tab[y][x] = '#';
             } else {
                tab[y][x] = ' ';
             }
>>>>>>> 6d3eee0e26e262b6f2bddad77ab2449e907e88ca
             ++x;
        }
        ++y;
    }
<<<<<<< HEAD

    board* res = (board*)malloc(sizeof(board));
    res->boardTable = tab;

    if(doAddWall) toReturn =  addWall(toReturn, 1);
=======

    board* res = (board*)malloc(sizeof(board));
    res->boardTable = tab;
   // if(doAddWall) return addWall(toReturn);
>>>>>>> 6d3eee0e26e262b6f2bddad77ab2449e907e88ca
    return toReturn;
}


board * addWall(board * toReturn, int numberTable){
    FILE* file = NULL;
    char nameFile[80];

    char num[2];
    sprintf(num, "%d", numberTable);


    /*char *bob = {numberTable, '\0'};
    printf("a"); */
    strcat(nameFile, "./table/table");

    strcat(nameFile, num);
    strcat (nameFile,".txt");

    file = fopen(nameFile, "r");

    if (file != NULL)
    {
        char actualChar;

        int x = 0; int y = 0;
        do
        {
            actualChar = fgetc(file); // On lit le caractère
            if(actualChar=='\n'){
                y++;
                x=0;
                //printf("y: %d ", y);
            }
            else {
                if(actualChar != ' '){
                    toReturn->boardTable[y][x] = actualChar;
                }
                x++;
                //printf("x : %d ", x);
            }

        }
        while (actualChar != EOF);

        fclose(file); // On ferme le fichier qui a été ouvert
    }

    return toReturn;
}



char readSquare(board * currentBoard, int x, int y){
    if(x > constLength || y > constHeight) return charEmptyBloc;
    return currentBoard->boardTable[y][x];
}

int setElementAtPosition(board *table, char element, int position_x, int position_y) {
    int check_state = 1;

    if(position_x < constLength && position_y < constHeight) {
        table->boardTable[position_y][position_x] = element;
    } else {
        check_state = 0;
    }
}
